(*  Test values convolution ================= *)

let test =     [
    [ 0.; 0.; 0.; 1.; 1.; 0.; 0.; 0. ];
    [ 0.; 0.; 0.; 1.; 1.; 0.; 0.; 0. ];
    [ 0.; 0.; 0.; 1.; 1.; 0.; 0.; 0. ];
    [ 0.; 0.; 0.; 1.; 1.; 0.; 0.; 0. ];
    [ 0.; 0.; 0.; 1.; 1.; 0.; 0.; 0. ];
    [ 0.; 0.; 0.; 1.; 1.; 0.; 0.; 0. ];
    [ 0.; 0.; 0.; 1.; 1.; 0.; 0.; 0. ];
    [ 0.; 0.; 0.; 1.; 1.; 0.; 0.; 0. ];
];;

let filter =     [
    [0.; 1.; 0.];
    [0.; 1.; 0.];
    [0.; 1.; 0.]
];;

let res = Ok [
    [0.;0.;3.;3.;0.;0.];
    [0.;0.;3.;3.;0.;0.];
    [0.;0.;3.;3.;0.;0.];
    [0.;0.;3.;3.;0.;0.];
    [0.;0.;3.;3.;0.;0.];
    [0.;0.;3.;3.;0.;0.];
];; 

instance (fun x -> Matrix.is_valid x && Convolution.convolution test x = res)
verify (fun x -> Matrix.is_valid x && Matrix.dimensions x = (3, 3) ==> Res.map Matrix.dimensions (Convolution.convolution test x) = Ok (5, 5))


(* Test values conv_channels ================= *)
(*
let test' = [
    [
        [ 0.; 0.; 0.; 1.; 1.; 0.; 0.; 0. ];
        [ 0.; 0.; 0.; 1.; 1.; 0.; 0.; 0. ];
        [ 0.; 0.; 0.; 1.; 1.; 0.; 0.; 0. ];
        [ 0.; 0.; 0.; 1.; 1.; 0.; 0.; 0. ];
        [ 0.; 0.; 0.; 1.; 1.; 0.; 0.; 0. ];
        [ 0.; 0.; 0.; 1.; 1.; 0.; 0.; 0. ];
        [ 0.; 0.; 0.; 1.; 1.; 0.; 0.; 0. ];
        [ 0.; 0.; 0.; 1.; 1.; 0.; 0.; 0. ];
    ];
    [
        [ 0.; 0.; 0.; 2.; 2.; 0.; 0.; 0. ];
        [ 0.; 0.; 0.; 2.; 2.; 0.; 0.; 0. ];
        [ 0.; 0.; 0.; 2.; 2.; 0.; 0.; 0. ];
        [ 0.; 0.; 0.; 2.; 2.; 0.; 0.; 0. ];
        [ 0.; 0.; 0.; 2.; 2.; 0.; 0.; 0. ];
        [ 0.; 0.; 0.; 2.; 2.; 0.; 0.; 0. ];
        [ 0.; 0.; 0.; 2.; 2.; 0.; 0.; 0. ];
        [ 0.; 0.; 0.; 2.; 2.; 0.; 0.; 0. ];
    ]
];;

let filter' = [
    [
        [0.; 1.; 0.];
        [0.; 1.; 0.];
        [0.; 1.; 0.];
    ];
    [
        [0.; 1.; 0.];
        [0.; 1.; 0.];
        [0.; 1.; 0.];
    ];
];;

let res' = Ok [
    [ 0.; 0.; 9.; 9.; 0.; 0. ];
    [ 0.; 0.; 9.; 9.; 0.; 0. ];
    [ 0.; 0.; 9.; 9.; 0.; 0. ];
    [ 0.; 0.; 9.; 9.; 0.; 0. ];
    [ 0.; 0.; 9.; 9.; 0.; 0. ];
    [ 0.; 0.; 9.; 9.; 0.; 0. ]
];;

Convolution.conv_channels test' filter'

instance (fun x -> Convolution.conv_channels test' x = res')
*)