type value =
  | Extreme of (real * real * real)
  | Normal of (real * real * real)

type vecs = value list

let rec dot_products vs =
  let open Real in
  match vs with
  | [] -> 0., 0.
  | Extreme (x_i, y_i, a_i) :: vs
  | Normal (x_i, y_i, a_i) :: vs
    ->
    let (p1, p2) = dot_products vs in
    (x_i *. a_i +. p1,
     y_i *. a_i +. p2)

let is_valid_r1 vecs =
  let rec aux seen_ex vecs =
  let open Real in
  match vecs with
  | [] -> seen_ex
  | Extreme (x_i, y_i, a_i) :: vs ->
    a_i = 1.0
    && x_i > y_i
    && aux true vs
  | Normal (x_i, y_i, a_i) :: vs ->
    a_i = 0.0
    && aux seen_ex vs
  in
  aux false vecs

lemma main vs =
  is_valid_r1 vs
  ==>
  let (p1,p2) = dot_products vs in
  p1 >. p2
[@@auto]
