(* let () = System.use "matrix.iml";; *)

module Max_pool = struct
    let rec max_pool_row input pool_size (row, col) =
        let (_, pool_cols) = pool_size in
        if col < 0 || pool_cols <= 0 then Ok [] else (* pool_cols <= 0 condition needed for Imandra to prove termination  *)
        let m = Matrix.sub_matrix input (row, col) pool_size in
        let head = Res.map Matrix.max m in
        let tail = max_pool_row input pool_size (row, col - pool_cols) in
        Res.bind2 head tail (fun hd tl -> Ok (tl @ [hd]))
    ;;

    let rec max_pool_loop input (pool_rows, pool_cols) row =
        let (i_rows, i_cols) = Matrix.dimensions input in
        if row < 0 || pool_rows <= 0 then Ok [] else (* pool_rows <= 0 condition needed for Imandra to prove termination  *)
        let pool_nb = i_cols / pool_cols in
        let col = pool_cols * (pool_nb - 1) in
        let head = max_pool_row input (pool_rows, pool_cols) (row, col) in
        let tail = max_pool_loop input (pool_rows, pool_cols) (row - pool_rows) in
        (Res.lift2 List.cons) head tail
    ;;

    let max_pool' input (pool_rows, pool_cols) = (* todo: add stride, padding for more flexibility *)
        let (i_rows, _) = Matrix.dimensions input in
        if i_rows < pool_rows then Ok [] else
        let pool_nb = i_rows / pool_rows in
        let row = pool_rows * (pool_nb - 1) in
        max_pool_loop input (pool_rows, pool_cols) row
    ;;

    let max_pool pool_size input = Res.map List.rev (max_pool' input pool_size)
end


(* let test_mp = [
    [1.; 2. ; 3. ; 4.];
    [1.; 2. ; 3. ; 4.];
    [1.; 2. ; 3. ; 4.];
    [1.; 2. ; 3. ; 9.];
    [1.; 2. ; 3. ; 9.];
];;

Max_pool.max_pool (2, 2) test_mp;; *)