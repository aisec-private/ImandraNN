module Robustness = struct
  let l0 x y = (match x with
    | x::[] -> (match y with 
      | y::[] -> Matrix.l0 x y
      | _ -> Error "invalid matrix size y")
    | _ -> Error "invalid matrix size x")

  let (>>=) = Res.bind

  let (<=?) = Res.lte

  let (>=?) = Res.gte

  let (<=??) x y = (match y with 
    | Ok y' -> x <=? y'
    | Error _ -> false)

  (* Classification robustness *)
  let cr model input c epsilon ?(constrnt=true) x = constrnt && (l0 x input) <=? epsilon ==> model x = (Ok c)
  
  (* Standard robustness *)
  let sr model input delta epsilon ?(constrnt=true) x = 
    let y = model input in
    let fx = model x in
    let dist = Res.bind2 y fx Vec.l0 in
    constrnt && (l0 x input) <=? epsilon ==> dist <=? delta
  
  (* Lipschitz robustness *)
  let lr model input l epsilon ?(constrnt=true) x = 
    let y = model input in
    let fx = model x in
    let dist_in = l0 x input in
    let dist_out = Res.bind2 y fx Vec.l0 in
    let l' = dist_in >>= (fun x -> Ok (x * l)) in
    constrnt && dist_in <=? epsilon ==> dist_out <=?? l'

  (* approximate classification robustness *)
  let acr model input class_id eta epsilon ?(constrnt=true) x = 
    let class_res = Res.flatten (Res.map (Vec.nth class_id) (model x)) in
    constrnt && (l0 x input) <=? epsilon ==> class_res >=? eta
end
