let () = System.use "acas_xu_network.iml";;

let relu = FC.relu;;

let is_valid (dist, angle, angle_int, vown, vint) =
  -3.14159 <=. angle && angle <=. 3.14159 &&        (* angles are in [-pi, pi] *)
  -3.14159 <=. angle_int && angle_int <=. 3.14159 &&
  dist >=. 0. && vown >=. 0. && vint >=. 0. (* speed and distances are positive *)

(* We prove characterizing forward-chaining rules about `relu`,
   and then we disable it for all of the proofs. This way,
   `relu` induces no simplification case-splits, while all
   relevant information about `relu` values is propagated,
   per instance, on demand to our simplification context. *)

lemma relu_pos x =
  x >=. 0. ==> (relu x) [@trigger] = x
[@@auto] [@@fc]
;;

lemma relu_neg x =
  x <=. 0. ==> (relu x) [@trigger] = 0.
[@@auto] [@@fc]
;;

#disable relu;;

let proof property_name () = Verify.top ~hints:Hints.auto ~upto:(Logic_ast.Upto_steps 1i) property_name 
[@@program]
;;

let timing f = let t = Util.ptime_now () in 
  let ret = f () in 
  let t' = Util.ptime_now () in 
  ret, (Q.of_float t') -. (Q.of_float t)
[@@program]
;;

let record_proof property_name proof_nb network_id = 
  let res, t = timing (proof property_name) in
  let () = Printf.printf "Verifying property %d on network %s\n" (Z.to_int proof_nb) network_id in
  let out_path = "./timing.csv" in
  let oc = open_out_gen [Open_append; Open_creat] (Z.to_int 0o666) out_path in
  let res_str = match res with 
    | Imandra_interactive.Verify.V_proved _ -> "proved"
    | Imandra_interactive.Verify.V_proved_upto _ -> "timeout"
    | Imandra_interactive.Verify.V_refuted _ -> "refuted"
    | Imandra_interactive.Verify.V_unknown _ -> "unknown"
    in
  Printf.fprintf oc "%d;%s;%s;%f\n" (Z.to_int proof_nb) network_id res_str (Q.to_float t);
  close_out oc;
[@@program]

