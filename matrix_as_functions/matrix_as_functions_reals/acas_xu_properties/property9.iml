(*
Property φ9.
– Description: Even if the previous advisory was “weak right”, the presence of
a nearby intruder will cause the network to output a “strong left” advisory
instead.
– Tested on: N3,3.
– Input constraints: 2000 ≤ ρ ≤ 7000, −0.4 ≤ θ ≤ −0.14, −3.141592 ≤ ψ ≤
−3.141592 + 0.01, 100 ≤ vown ≤ 150, 0 ≤ vint ≤ 150.
– Desired output property: the score for “strong left” is minimal.
*)

let precondition9 (dist, angle, angle_int, vown, vint) =
  (2000 <= dist && dist <= 7000) &&
  (angle = 0) &&
  (angle_int = 3) &&
  (100 <= vown && vown <= 150) &&
  (0 <= vint && vint <= 150)
;;

let postcondition9 output = 
  let g i j = output (Matrix.Value (i,j)) in
  let coc = g 0 0 in
  let weak_left = g 0 1 in
  let weak_right = g 0 2 in
  let strong_left = g 0 3 in
  let strong_right = g 0 4 in
  ( strong_left <= coc &&
    strong_left <= weak_left && 
    strong_left <= weak_right &&
    strong_left <= strong_right
  )
;;

let property9 network x =
  is_valid x && precondition9 x ==> postcondition9 (network x)
;;



(* Network 3,3 *)
let () = System.use("./acas_xu/networks_iml/ACASXU_run2a_3_3_batch_2000.iml");;

let run (dist, angle, angle_int, vown, vint) =
  let open Weights in 
  let m = mk_input (dist, angle, angle_int, vown, vint) in
  layer0 m |> layer1 |> layer2 |> layer3 |> layer4 |> layer5 |> layer6
;;

let property = property9 run;;

let () = record_proof "property" 9 "3,3";;

