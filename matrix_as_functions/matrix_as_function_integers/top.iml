let () = System.use "matrix.iml"
let () = System.use "fully_connected.iml"
let () = System.use "weights.iml"

(* test input *)

let input_happy_list = [
  ((0, 0), 1);
  ((2, 2), 1);
  ((2, 6), 1);
  ((5, 2), 1);
  ((5, 6), 1);
  ((6, 3), 1);
  ((6, 4), 1);
  ((6, 5), 1)
];;

let input_happy = [
      [ 1; 0; 0; 0; 0; 0; 0; 0; 0];
      [ 0; 0; 0; 0; 0; 0; 0; 0; 0];
      [ 0; 0; 1; 0; 0; 0; 1; 0; 0];
      [ 0; 0; 0; 0; 0; 0; 0; 0; 0];
      [ 0; 0; 0; 0; 0; 0; 0; 0; 0];
      [ 0; 0; 1; 0; 0; 0; 1; 0; 0];
      [ 0; 0; 0; 1; 1; 1; 0; 0; 0];
      [ 0; 0; 0; 0; 0; 0; 0; 0; 0];
      [ 0; 0; 0; 0; 0; 0; 0; 0; 0];
];;

let input_happy_m = Matrix.of_list_list 9 9 input_happy;;

let input_happy_m' = Matrix.of_sparse_list 9 9 input_happy_list;;

let rec print_list_rec l = match l with
| [] -> ""
| (h::t) -> String.concat "; " [(Printf.sprintf "%4d" h); (print_list_rec t)]
[@@program];;

let print_list l = Printf.printf "[ %s ]\n" (print_list_rec l) [@@program];;

let print_matrix (m: 'a Matrix.t) =
  let line = ref [] in
  let record x = line := (Z.to_int x) :: !line in
  for i = 0i to Z.to_int ((Matrix.rows m) - 1) do
    for j = 0i to Z.to_int ((Matrix.cols m) - 1) do
      let v = m (Matrix.Value (Z.of_int i, Z.of_int j)) in
      record v
    done;
    print_list (List.rev !line);
    line := []
  done
  [@@program]

let pp_matrix = print_matrix [@@program]
#install_printer pp_matrix

let weights' = [
  [-1; -1; -1; -1];
  [0; 1; 2; 3];
  [4; 5; 6; 7];
  [8; 9; 10; 11]
]

let weights = Matrix.of_list_list 4 4 weights';;

let input' = [
  [2; 2; 2]
]

let input = Matrix.of_list_list 1 3 input';;

let relu x = if x > 0 then x else 0

let out = FC.fc relu weights input;;
