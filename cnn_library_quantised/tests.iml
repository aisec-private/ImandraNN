(*  Test values convolution ================= *)

(* let test =     [
    [ 0; 0; 0; 1; 1; 0; 0; 0 ];
    [ 0; 0; 0; 1; 1; 0; 0; 0 ];
    [ 0; 0; 0; 1; 1; 0; 0; 0 ];
    [ 0; 0; 0; 1; 1; 0; 0; 0 ];
    [ 0; 0; 0; 1; 1; 0; 0; 0 ];
    [ 0; 0; 0; 1; 1; 0; 0; 0 ];
    [ 0; 0; 0; 1; 1; 0; 0; 0 ];
    [ 0; 0; 0; 1; 1; 0; 0; 0 ];
];;

let filter =     [
    [0; 1; 0];
    [0; 1; 0];
    [0; 1; 0]
];;

let res = Ok [
    [0;0;3;3;0;0];
    [0;0;3;3;0;0];
    [0;0;3;3;0;0];
    [0;0;3;3;0;0];
    [0;0;3;3;0;0];
    [0;0;3;3;0;0];
];; 

instance (fun x -> Matrix.is_valid x && Convolution.convolution test x = res)
verify (fun x -> Matrix.is_valid x && Matrix.dimensions x = (3, 3) ==> Res.map Matrix.dimensions (Convolution.convolution test x) = Ok (5, 5)) *)


(* Test values conv_channels ================= *)

let test' = [
    [
        [ 0; 1; 0; ];
        [ 0; 1; 0; ];
        [ 0; 1; 0; ];
    ];
    [
        [ 0; 2; 0; ];
        [ 0; 2; 0; ];
        [ 0; 2; 0; ];
    ]
];;

let filter' = [
    [
        [0; 1;];
        [0; 1;];
    ];
    [
        [0; 1;];
        [0; 1;];
    ];
];;

let res' = Ok [
    [ 6; 0 ];
    [ 6; 0 ]
];;

let l0 (x: Z.t Matrix.matrix Vec.vector) (y: Z.t Matrix.matrix Vec.vector) = 
    let z = List.map2 Matrix.l0 x y in
    let z' = Res.flatten (Res.map Res.extract_list z) in
    Res.map Vec.sum z'
;;

let (<=?) = Res.lte;;

verify (fun x -> l0 x test' <=? 1 ==> Res.bind2 (Convolution.conv_channels x filter') res' Matrix.l0 <=? 1) [@@blast];;